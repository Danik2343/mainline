notify-send.sh and notify-action.sh come from https://github.com/bkw777/notify-send.sh
which is a fork and rewrite of https://github.com/vlevit/notify-send.sh

Some changes are for efficiency, removing unnecessary dependencies, external tools, forks, etc.
Some changes are fixing or making more reliable the original functionality.
Some changes are changing the original functionality.
Some of the functionality changes may or may not be generally useful (outside of mainline).

--------------------------------------------------------------------------------

Changes to notify-send.sh

 * --force-close option changed to more generally mean just "explicitly close"

   Previously: it just meant to start a timer in the background to send a close
   command after the same amount of time as the --expire-time, IE in case the
   notification daemon doesn't impliment timeouts, or ignores the requested
   timeout because of user settings, this option means to actively send a close
   command ourselves after the same amount of time instead of relying on the
   notification daemon to do it.

   Now: it still does that, but it also sends a close command immediately
   when processing any event, whether ActionInvoked or NotificationClosed,
   as well as after the requested timeout (if any).

   This is most useful in concert with --expire-time=0
   because 0 means never expire. So, --expire-time=0 --force-expire
   means never expire until the notification is touched, but once it is touched,
   then expire (end the process watching for button presses).

 * Refactor to avoid unecessary forks for external tools and subshells,
   and optimize the code generally in various other ways besides just forks.
   This replaced essentially everything, although the overall structure is still
   mostly the the same. Ship of theseus.

 * --close without specifying the ID gets the ID from --replace-file
   Ths is so the app code can specify the ID the same way for both creating and closing
   send:  notify-send.sh --replace-file=filename ...
   close: notify-send.sh --replace-file=filename --close

   Mainline only used this option briefly, and now uses --force-close instead,
   but it's free and sensible and potentially handy so no reason to remove it.

 * Fix quoting of action pairs so that a default action
   (--action=... with empty label), produces a blank button (or no button,
   depending on the particular behavior of different notification daemons)
   insted of a button with a label that looks like [  ''  ]

 * Removed the -d --default-action option as it doesn't actually work on all
   notification daemons, and you can do the same thing by just using --action
   with an empty label field: --action=":mainline-gtk"
   or --action="'':mainline-gtk" to replicate the original behavior.

 * Allow empty SUMMARY & BODY. Treat missing as empty instead of error.
   Mainline doesn't use it, but it's valid and there's no reason the script
   should treat it as an error. An empty notification with no title and no body
   and even no icon, still has an app-name, which can possibly be all
   the information the sender needed to deliver.

 * If --app-name is supplied, then export APP_NAME to the notify-action.sh
   child process. This allows to avoid hard-coding the name "mainline" into
   either script, and yet the notifications still say "mainline" and the temp
   files still say "mainline", yet the same scripts still work as a generic
   tool outside of mainline too.

 * "setsid" to free ourself from the action handler and explicit close child
   processes, so that we can exit and leave one less unneccessary background
   process waiting around the whole time the dbus monitor process is waiting
   for a ActionInvoked or NotificationClosed event, *which may never come*.

 * Prevent child/background processes from spamming the terminal except for
   certain errors. Clears up the mistaken appearance that the command didn't
   end and return to the prompt, when really it was just that a background
   process wrote to the tty and clobbered the foreground's prompt.
   Some errors are still allowed through.

--------------------------------------------------------------------------------

Changes to notify-action.sh

 * When replacing an ID, kill any previous monitor for the same ID first.
   See lengthy discussion of "kill obsolete monitors" and "kill current monitor"
   below for why this is needed and how it works.

 * Refactor to avoid unecessary forks for external tools and subshells,
   and optimize the code generally, aside from just forks.
   This replaced essentially everything, although the overall structure is still
   mostly the the same. Ship of theseus again.

 * "setsid" to free ourself from the invoked action process so we can exit.

 * Prevent child/background processes from spamming the terminal, except for
   certain errors. Clears up the mistaken appearance that the command didn't end
   and return to the prompt, whne really it was just that a background process
   wrote to the tty and clobbered the foreground's prompt.

 * Execute the action command directly instead of 'bash -c "command ..."'
   If you want to specify bash as the executable, you still can, but there
   is no reason to hard code that.

There is a bit to explain about the temp file and gdbus child process handling.
The two sections, "kill obsolete monitors" and "kill current monitor" 
must orchestrate with each other, and with other instances of ourself.
Basically it's normal (expected, not an error) for our gdbus monitor process to
be killed from outside by another instance of ourself, and it's likewise normal
(expected, not an error) for us to have to kill other instances of ourself.

=== kill obsolete monitors ===

This part has to orchestrate with the "kill current monitor" section.
It's not an error to find one or more old pid files,
with or without matching processes still active.

Notification events are not predictable, so when setting up a monitor to catch
an event (button press or notification closed), you never know how long you'll
wait for the event, or if the event will ever come.

You may never get a button press, you may never get a notification-closed,
the notification may never expire.

The converse is also true. The notification may be re-opened from the
notification daemon's history, and so both action events and on-close
events can be sent multiple times. This means they can be sent after we have
exited and are no longer around to respond to them.
Different desktop environments have different notification daemon programs
which all behave differently from each other in various ways.

And the --replace-id and --replace-file options for sending a new notification
to update an existing notification means that often, one or more of these
existing monitor processes is now obsolete(1), because this latest instance
of ourself is replacing it.
But those past instances of ourself have no way to know that their job is
done and they should exit. They will never end gracefully on their own, because
they are waiting for a dbus event that never came, and now never will come
So every time we start up, before starting the new/current monitor,
we need to first find any obsolete monitors and close them.

(1) "obsolete" is defined as matching all of the following criteria:

 * Pid file with the same APP_NAME as us

 * Older than ourself

   Using [[ file -ot file ]] to compare relative ages of our pid files
   to get reliable comparison even for sub-second differences, without
   needing to record and compare timestamps and without needing to spwan
   a child just to run "date" just to get sub-second times which you can't
   get from bash's built-in printf %()T

 * From the same desktop session

   Using $DISPLAY from the pid file to compare with ours.

   This avoids clobbering processes form another session.
   IE, you can have multiple desktop sessions on multiple virtual consoles,
   or remote desktop sessions, all for the same user on the same machine at
   the same time. All concurrent sessions will have different $DISPLAY values.
   So if we record $DISPLAY in the pid file we can safely tell whether it's OK
   to consider killing the PID.

   DISPLAY values are like PIDs in that they are only unique at any given moment.
   They get re-used and are not unique over time. That means it's possible
   to pick up a pid file with a matching $DISPLAY, but really the pid is from
   some other past session rather than our current one. That's OK.
   Any monitor from a past session that was logged out and back in, is
   automatically obsolete because it's an orphan.

 * Watching the same notification ID we are about to watch.

   The notification ID is recorded in the pid file along with PID and DISPLAY


Only if ALL of those are true at the same time for a given PID,
then that's a monitor we should kill because we are it's replacement.

And when we kill it, remove the pid file *before* killing the PID.

The pid is for a child gdbus process, not it's parent notify-action.sh bash process.

When we kill a gdbus process, it's parent notify-action.sh breaks out of it's
"while loop" and proceeds to try to do it's own clean-up, the same as if it had
concluded normally by processing an event.
But we have already killed the PID that it would normally expect to kill.
That PID either no longer exists, or if it exists, it's some other unrelated
process that we should NOT kill.

So here, remove the pid file before killing, so that it's impossible
for it's parent notify-action.sh to pick up an invalid PID and try to kill it.

The first [[ -s file ]] catches the case when the globbing pattern
didn't match any files and the variable ends up containing the globbing pattern.

=== kill current monitor ===

This part is actually already described above,
but just to go over it from *this* parts point of view...

This has to orchestrate with the "kill obsolete monitors" section.
It's not an error if the pid file we know we wrote is missing.

While we have been waiting for a dbus event which never came,
another new instance of ourself may have started up, found our
pid file, and killed our gdbus child process.

When that happens, the while loop ends and we fall through to here,
and the pid file we wrote will be missing. This is intentional.
(it won't always be missing, just that it's expected that it might or
might not exist) When the gdbus process was killed, the PID we wrote
into the pid file is no longer valid and we should NOT just indiscriminately
try to kill that PID any more, because some other random unrelated new
process may now occupy that PID. So during "kill obsolete", we remove the
pid file before killing the pid, so that it's impossible for us to pick up
an invalid PID here.
So here, if the file doesn't exist, just exit without error.


TODO: Can we make this more elegant by just sending a signal to the
other parent notify-action.sh process, and it traps the signal to exit
itself, and it's child gdbus process exits itself naturally on HUP?
